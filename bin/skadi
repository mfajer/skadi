#!/usr/bin/env python

import io as _io
import optparse
import os
import sys

pwd = os.path.dirname(__file__)
root = os.path.abspath(os.path.join(pwd, '..'))
sys.path.append(root)

from skadi import demo as d

usage = "skadi [FILE] \n\nExample: 'bin/%prog tests/data/test.dem'"
option_parser = optparse.OptionParser(usage = usage)
(options, args) = option_parser.parse_args()

if len(args) < 1:
    print "No arguments provided.  Run skadi -h for example usage."

for abspath in args:
  print 'opening {0}...'.format(os.path.basename(abspath))

  demo = d.construct(abspath)

  file_info = demo.file_info
  print 'playback info:'
  print '- time: {}'.format(file_info.playback_time)
  print '- ticks: {}'.format(file_info.playback_ticks)
  print '- frames: {}'.format(file_info.playback_frames)

  print 'player summary:'
  for pi in file_info.game_info.dota.player_info:
    player_name = pi.player_name.encode('UTF-8')
    hero_name = pi.hero_name.encode('UTF-8')
    print '- {} ({})'.format(player_name, hero_name)

  kotl_ehandle = None
  vec_x = []
  vec_y = []
  cell_x = []
  cell_y = []
  frac_health = []

  for game in demo.stream(tick=5000):
    tick, user_msgs, game_evts, world, modifiers = game

    print 't {}'.format(tick)

    if kotl_ehandle is None:
      for ehandle in world.find_all_by_dt(u'DT_DOTA_Unit_Hero_KeeperOfTheLight'):
        kotl_ehandle = ehandle
    if kotl_ehandle:
      kotl = world.find(kotl_ehandle)
      vec_x.append(kotl[('DT_DOTA_BaseNPC', 'm_vecOrigin')][0])
      vec_y.append(kotl[('DT_DOTA_BaseNPC', 'm_vecOrigin')][1])
      cell_x.append(kotl[('DT_DOTA_BaseNPC', 'm_cellX')])
      cell_y.append(kotl[('DT_DOTA_BaseNPC', 'm_cellY')])
      frac_health.append(float(kotl[('DT_DOTA_BaseNPC', 'm_iHealth')]) / kotl[('DT_DOTA_BaseNPC', 'm_iMaxHealth')])

xs = [cell + vec/128.0 for (cell, vec) in zip(cell_x, vec_x)]
ys = [cell + vec/128.0 for (cell, vec) in zip(cell_y, vec_y)]
